#!/usr/bin/python

import nis
import argparse
import subprocess

MAKEDB = "/usr/bin/makedb"
DB_DIR = "/var/db/"
		
def process_map(service,map_name,id_field=3,verbose=False):

	if verbose:
		print "processing " + service + " from map " + map_name

	try:
		map_entries = nis.cat(map_name)
	except nis.error as ex:
		print "Error retrieving map " + map_name + ": " + str(ex)
		exit(2)		

	makedb_input = ""

	for key, value in map_entries.iteritems():
		makedb_input += "." + key + " " + value + "\n"
		parts = value.split(':')
		makedb_input += "=" + parts[2] + " " + value + "\n"

	try:
		proc = subprocess.Popen(MAKEDB + " -o " + DB_DIR + "/" + service + ".db -",stdin=subprocess.PIPE,stdout=subprocess.PIPE, stderr=subprocess.STDOUT,shell=True)
		(stdoutdata, stderrdata) = proc.communicate(makedb_input)

		if proc.returncode != 0:
			print "Error executing makedb. Return code: " + str(proc.returncode)
			print str(stdoutdata)
			print str(stderrdata)
	except Exception as ex:
		print "Error executing makedb: " + str(ex)
		exit(-1)

def main():
	parser = argparse.ArgumentParser("Convert NIS maps into db files compatbile with glibc 2.15 onwards")
	parser.add_argument("-v", "--verbose", help="output debugging information", action="store_true")
	args = parser.parse_args()

	if args.verbose:
		print "using nis domain: " + nis.get_default_domain()

	try:
		maps = nis.maps()
	except nis.error as ex:
		print "Error retrieving list of maps: " + str(ex)
		exit(1)

	## passwd
	if "passwd.byname" in maps:
		process_map("passwd","passwd.byname",verbose=args.verbose)
	else:
		print "passwd.byname not found in NIS, skipping passwd.db generation"

	## group
	if "group.byname" in maps:
		process_map("group","group.byname",verbose=args.verbose)
	else:
		print "group.byname not found in NIS, skipping group.db generation"

if __name__ == "__main__":
	main()

