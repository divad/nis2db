#!/usr/bin/python

import sys
import nis
import argparse
import subprocess

MAKEDB = "/usr/bin/makedb"
DB_DIR = "/var/db/"
		
def process_map(service,map_name,output_dir,id_field=3,verbose=False):

	if verbose:
		print "creating " + output_dir + service + ".db from map " + map_name

	try:
		map_entries = nis.cat(map_name)
	except nis.error as ex:
		sys.stderr.write("Error retrieving map " + map_name + ": " + str(ex) + "\n")
		sys.exit(3)		

	makedb_input = ""

	for key, value in map_entries.iteritems():
		makedb_input += "." + key + " " + value + "\n"
		parts = value.split(':')
		makedb_input += "=" + parts[2] + " " + value + "\n"

	try:
		proc = subprocess.Popen(MAKEDB + " -o " + output_dir + "/" + service + ".db -",stdin=subprocess.PIPE,stdout=subprocess.PIPE, stderr=subprocess.STDOUT,shell=True)
		(stdoutdata, stderrdata) = proc.communicate(makedb_input)

		if proc.returncode != 0:
			print "Error executing makedb. Return code: " + str(proc.returncode)
			print str(stdoutdata)
	except Exception as ex:
		sys.stderr.write("Error executing makedb: " + str(ex) + "\n")
		sys.exit(4)

def main():
	parser = argparse.ArgumentParser("Convert NIS maps into db files compatbile with glibc 2.15 onwards")
	parser.add_argument("-v", "--verbose", help="output debugging information", action="store_true")
	parser.add_argument("-o", "--output", help="the directory to create the db files in", action="store", default=DB_DIR)
	args = parser.parse_args()

	try:
		nisdomain = nis.get_default_domain()
	except nis.error as ex:
		sys.stderr.write("Could not obtain NIS domain: " + str(ex) + "\n")
		sys.exit(1)

	if not args.output.endswith("/"):
		args.output = args.output + "/"

	if args.verbose:
		print "using nis domain: " + nisdomain
		print "output dir: " + args.output

	try:
		maps = nis.maps()
	except nis.error as ex:
		sys.stderr.write("Error retrieving list of maps: " + str(ex) + "\n")
		sys.exit(2)

	## passwd
	if "passwd.byname" in maps:
		process_map("passwd","passwd.byname",args.output,verbose=args.verbose)
	else:
		sys.stderr.write("passwd.byname not found in NIS, skipping passwd.db generation\n")

	## group
	if "group.byname" in maps:
		process_map("group","group.byname",args.output,verbose=args.verbose)
	else:
		sys.stderr.write("group.byname not found in NIS, skipping group.db generation\n")

if __name__ == "__main__":
	main()

